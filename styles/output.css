/*! tailwindcss v4.1.4 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: "Lexend", "sans-serif";
    --font-mono: "Martian Mono", "monospace";
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --container-3xl: 48rem;
    --container-4xl: 56rem;
    --container-6xl: 72rem;
    --container-7xl: 80rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --font-weight-normal: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --radius-lg: 0.5rem;
    --radius-2xl: 1rem;
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .modal {
    pointer-events: none;
    position: fixed;
    inset: calc(0.25rem * 0);
    z-index: 80;
    margin: calc(0.25rem * 0);
    display: grid;
    width: 100%;
    height: 100%;
    justify-items: center;
    padding: calc(0.25rem * 4);
    opacity: 0%;
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 500ms;
    --tw-duration: 500ms;
  }
  .menu {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    gap: calc(0.25rem * 0.5);
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --menu-active-fg: var(--color-primary);
    --menu-active-bg: var(--color-primary);
    @supports (color: color-mix(in lab, red, red)) {
      --menu-active-bg: color-mix(in oklab, var(--color-primary) 10%, #0000);
    }
    :where(li ul) {
      position: relative;
      white-space: nowrap;
    }
    :where(li:not(.dropdown) ul) {
      margin-inline-start: calc(0.25rem * 4);
      padding-inline-start: calc(0.25rem * 2);
      &:before {
        position: absolute;
        inset-inline-start: calc(0.25rem * 0);
        top: calc(0.25rem * 3);
        bottom: calc(0.25rem * 2.5);
        background-color: var(--color-base-content);
        opacity: 10%;
        width: var(--border);
        content: "";
      }
    }
    :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
      display: none;
    }
    :where(.menu li:empty) {
      background-color: var(--color-base-content);
      opacity: 10%;
      margin: 0.5rem 1rem;
      height: 1px;
    }
    :where(li:not(.menu-title, .tooltip) > *:not(ul, .collapse, .menu-title, .btn)) {
      border-radius: var(--radius-field);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 2.5);
      text-align: start;
      transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
      transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
      transition-timing-function: var(--ease-out);
      transition-duration: var(--tw-duration, var(--default-transition-duration));
      transition-duration: 200ms;
      --tw-duration: 200ms;
      --tw-ease: var(--ease-out);
      text-wrap: balance;
    }
    :where(li:not(.menu-title) > *:not(ul, .collapse, .menu-title, .btn)) {
      display: grid;
      grid-auto-flow: column;
      align-content: flex-start;
      align-items: center;
      gap: calc(0.25rem * 2);
      grid-auto-columns: minmax(auto, max-content) auto max-content;
      user-select: none;
    }
    li.tooltip > * {
      border-radius: var(--radius-field);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 2.5);
      text-align: start;
    }
    :where(.menu li:not(.menu-title, .menu-disabled)) {
      color: var(--color-base-content);
    }
    :where(.menu li:not(.menu-title, .menu-disabled) > *:not(ul, .collapse, .menu-title)) {
      &:not(.btn).menu-focus, &:not(.btn):focus-visible {
        cursor: pointer;
        background-color: var(--color-neutral);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
        }
        color: var(--color-base-content);
        --tw-outline-style: none;
        outline-style: none;
      }
      &:hover {
        cursor: pointer;
        background-color: var(--color-neutral);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
        }
        color: var(--color-base-content);
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    li:not(.menu-title, .menu-disabled) > :not(ul, .menu-title, .collapse, .btn):active, li:not(.menu-title, .menu-disabled) > :not(ul, .menu-title, .collapse, .btn).menu-active {
      color: var(--menu-active-fg);
      background-color: var(--menu-active-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    li.menu-disabled {
      pointer-events: none;
      opacity: 50%;
      webkit-user-select: none;
      user-select: none;
    }
    :where(& li) {
      position: relative;
      display: flex;
      flex-shrink: 0;
      flex-direction: column;
      flex-wrap: wrap;
      align-items: stretch;
      .badge {
        justify-self: flex-end;
      }
    }
  }
  .input-floating-label {
    pointer-events: none;
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    margin-inline-start: calc(0.25rem * 3);
    width: fit-content;
    overflow: hidden;
    background-color: transparent;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    text-overflow: ellipsis;
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
    top: calc(var(--size-field, 0.25rem) * 9.5 / 2);
    translate: 0 -50%;
    transition: top 0.1s ease-out, translate 0.1s ease-out, scale 0.1s ease-out, opacity 0.1s ease-out;
  }
  .textarea-floating-label {
    pointer-events: none;
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    inset-inline-start: 1px;
    margin-inline-start: calc(0.25rem * 4);
    width: fit-content;
    overflow: hidden;
    background-color: transparent;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    text-overflow: ellipsis;
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
    top: 9px;
    transition: top 0.1s ease-out, translate 0.1s ease-out, scale 0.1s ease-out, opacity 0.1s ease-out;
  }
  .link {
    --link-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --link-color: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
    display: inline-block;
    cursor: pointer;
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    text-decoration-line: underline;
    color: var(--link-color);
    &:hover {
      color: var(--link-color);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--link-color) 80%, #000);
      }
    }
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
    }
    &:focus-visible {
      outline: 2px solid currentColor;
      outline-offset: 2px;
    }
    &.disabled, &[disabled], &:disabled {
      pointer-events: none;
      opacity: 50%;
    }
    &.link-hover {
      text-decoration-line: none;
      @media (hover:hover) {
        &:hover {
          @media (hover: hover) {
            text-decoration-line: underline;
          }
        }
      }
    }
    &.link-animated {
      position: relative;
      text-decoration-line: none;
      &::before {
        content: var(--tw-content);
        content: var(--tw-content);
        pointer-events: none;
        position: absolute;
        inset-inline-start: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
        height: 1px;
        width: 100%;
        background-color: currentColor;
        transition-property: transform, translate, scale, rotate;
        transition-timing-function: var(--ease-in-out);
        transition-duration: 300ms;
        --tw-duration: 300ms;
        --tw-ease: var(--ease-in-out);
        --tw-content: '';
      }
    }
    &.link-animated::before {
      transform-origin: 100% 50%;
      transform: scale3d(0, 1, 1);
    }
    &.link-animated:hover::before {
      transform-origin: 0% 50%;
      transform: scale3d(1, 1, 1);
    }
  }
  .input-floating {
    .input:has(> &) input {
      &::placeholder {
        color: transparent;
      }
      &:focus {
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
      }
    }
    position: relative;
    display: block;
    width: 100%;
    .input {
      &::placeholder {
        color: transparent;
      }
      &:focus {
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
      }
      &:has(> input[disabled]), &:is(:disabled, [disabled]) {
        border-style: var(--tw-border-style);
        border-width: 1px;
        background-color: transparent;
        opacity: 50%;
        & ~ .input-floating-label {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 30%, transparent);
          }
        }
      }
    }
    &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
      .input-floating-label {
        pointer-events: auto;
        top: calc(0.25rem * 0);
        background-color: var(--color-base-100);
        padding-inline: calc(0.25rem * 1);
        --tw-font-weight: var(--font-weight-medium);
        font-weight: var(--font-weight-medium);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
        }
        translate: -12.5% calc(-50% - 0.125em);
        scale: 0.75;
      }
    }
    &:focus-within, &:has(.input:focus) {
      .input-floating-label {
        --input-color: var(--color-primary);
        color: var(--input-color);
      }
    }
    &:has(.input-xs) .input-floating-label {
      margin-inline-start: calc(0.25rem * 2.5);
      font-size: var(--text-xs);
      line-height: var(--tw-leading, var(--text-xs--line-height));
      top: calc(var(--size-field, 0.25rem) * 6 / 2);
    }
    &:has(.input-sm) .input-floating-label {
      margin-inline-start: calc(0.25rem * 2.5);
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
      top: calc(var(--size-field, 0.25rem) * 7.5 / 2);
    }
    &:has(.input-md) .input-floating-label {
      margin-inline-start: calc(0.25rem * 3);
      font-size: var(--text-base);
      line-height: var(--tw-leading, var(--text-base--line-height));
      top: calc(var(--size-field, 0.25rem) * 9.5 / 2);
    }
    &:has(.input-lg) .input-floating-label {
      margin-inline-start: calc(0.25rem * 4);
      font-size: var(--text-lg);
      line-height: var(--tw-leading, var(--text-lg--line-height));
      top: calc(var(--size-field, 0.25rem) * 11.5 / 2);
    }
    &:has(.input-xl) .input-floating-label {
      margin-inline-start: calc(0.25rem * 4.5);
      font-size: var(--text-xl);
      line-height: var(--tw-leading, var(--text-xl--line-height));
      top: calc(var(--size-field, 0.25rem) * 14 / 2);
    }
  }
  .btn {
    display: inline-flex;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 2);
    text-align: center;
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    text-decoration-line: none;
    webkit-user-select: none;
    user-select: none;
    @media (prefers-reduced-motion: reduce) {
      transition-property: none;
    }
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    height: var(--size);
    outline-color: var(--btn-color, var(--color-neutral));
    @supports (color: color-mix(in lab, red, red)) {
      outline-color: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 30%, var(--color-base-100));
    }
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.96, 1.03);
    transition-duration: 0.25s;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border: var(--border) solid var(--btn-border);
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 8%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --btn-bg: var(--btn-color, var(--color-neutral));
    --btn-fg: var(--color-neutral-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
    @supports (color: color-mix(in lab, red, red)) {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    }
    --btn-shadow: 0px 1px 3px 0px var(--color-base-300),
    0px 1px 2px -1px var(--color-base-300);
    @supports (color: color-mix(in lab, red, red)) {
      --btn-shadow: 0px 1px 3px 0px color-mix(in oklab, var(--color-base-300) 40%, #0000),
    0px 1px 2px -1px color-mix(in oklab, var(--color-base-300) 40%, #0000);
    }
    --btn-noise: var(--fx-noise);
    @media (hover: hover) {
      &:hover {
        --btn-bg: var(--btn-color, var(--color-neutral));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 90%, #000);
        }
      }
    }
    &:active:hover:not(.btn-active), &:active:focus:not(.btn-active) {
      --tw-scale-x: 95%;
      --tw-scale-y: 95%;
      --tw-scale-z: 95%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
      transition-property: transform, translate, scale, rotate;
      transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
      transition-timing-function: ease-out;
      transition-duration: var(--tw-duration, var(--default-transition-duration));
      transition-duration: 300ms;
      --tw-duration: 300ms;
    }
    &:focus-visible {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)), #000 10%);
      }
      outline-width: 2px;
      outline-style: solid;
    }
    &:is(:disabled, [disabled], .btn-disabled) {
      pointer-events: none;
      opacity: 50%;
      --tw-shadow: 0 0 #0000;
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
    &:is(input[type="checkbox"], input[type="radio"]) {
      appearance: none;
      &::after {
        content: attr(aria-label);
      }
      &:checked {
        background: var(--color-primary);
        color: var(--color-primary-content);
        outline-color: var(--color-primary);
        --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
        isolation: isolate;
      }
    }
  }
  .visible {
    visibility: visible;
  }
  .select-floating-label {
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    top: calc(0.25rem * 0);
    margin-inline-start: calc(0.25rem * 3);
    width: fit-content;
    overflow: hidden;
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 1);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    text-overflow: ellipsis;
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
    scale: 0.75;
    translate: -12.5% calc(-50% - 0.125em);
  }
  .chat {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    column-gap: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 1);
    .chat-avatar {
      grid-row: span 2 / span 2;
      align-self: flex-end;
    }
    .chat-header {
      grid-row-start: 1;
      margin-bottom: calc(0.25rem * 1);
      font-size: var(--text-xs);
      line-height: var(--tw-leading, var(--text-xs--line-height));
    }
    .chat-footer {
      grid-row-start: 3;
      margin-top: calc(0.25rem * 1);
      font-size: var(--text-xs);
      line-height: var(--tw-leading, var(--text-xs--line-height));
    }
    .chat-bubble {
      position: relative;
      display: block;
      width: fit-content;
      border-radius: var(--radius-box);
      padding: calc(0.25rem * 3);
      max-width: 90%;
      min-height: 2.75rem;
      min-width: 2.75rem;
      &:before {
        position: absolute;
        bottom: calc(0.25rem * 0);
        width: calc(0.25rem * 4);
        height: calc(0.25rem * 4);
        background-color: inherit;
        content: "";
        mask-size: contain;
        mask-repeat: no-repeat;
        mask-position: center;
      }
    }
    &.chat-receiver {
      place-items: start;
      grid-template-columns: auto 1fr;
      .chat-header {
        grid-column-start: 2;
      }
      .chat-footer {
        grid-column-start: 2;
      }
      .chat-avatar {
        grid-column-start: 1;
      }
      .chat-bubble {
        grid-column-start: 2;
        border-end-start-radius: 0;
        background-color: var(--color-base-100);
        color: var(--color-base-content);
        &:before {
          inset-inline-start: -0.749rem;
          mask-image: url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e");
        }
        [dir="rtl"] &:before {
          mask-image: url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e");
        }
      }
    }
    &.chat-sender {
      place-items: end;
      grid-template-columns: 1fr auto;
      .chat-header {
        grid-column-start: 1;
      }
      .chat-footer {
        grid-column-start: 1;
      }
      .chat-avatar {
        grid-column-start: 2;
      }
      .chat-bubble {
        grid-column-start: 1;
        border-end-end-radius: 0;
        background-color: var(--color-primary);
        text-align: end;
        color: var(--color-primary-content);
        &:before {
          inset-inline-start: 99.9%;
          mask-image: url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e");
        }
        [dir="rtl"] &:before {
          mask-image: url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e");
        }
      }
    }
  }
  .switch {
    border: var(--border) solid #0000;
    color: var(--color-base-100);
    position: relative;
    display: inline-grid;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    place-content: center;
    border-radius: calc(infinity * 1px);
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    @media print {
      outline: .25rem solid;
    }
    grid-template-columns: 0fr 1fr 1fr;
    padding: var(--toggle-p);
    box-shadow: 0 1px currentColor inset;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
    }
    background-color: var(--input-color);
    transition: color 0.3s, grid-template-columns 0.2s;
    --input-color: var(--color-neutral);
    --toggle-p: 0.1875rem;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2);
    height: var(--size);
    &:before {
      position: relative;
      inset-inline-start: calc(0.25rem * 0);
      grid-column-start: 2;
      grid-row-start: 1;
      aspect-ratio: 1 / 1;
      height: 100%;
      border-radius: calc(infinity * 1px);
      background-color: currentColor;
      @media print {
        outline: .25rem solid;
      }
      @media print {
        outline-offset: -1rem;
      }
      translate: 0;
      --tw-content: "";
      content: var(--tw-content);
      transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
      box-shadow: 0 -1px oklch(59.99% 0 0 / calc(var(--depth) * 0.08)) inset, 0 8px 0 -4px oklch(59.99% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px 2px 0 oklch(0% 0 0 / 0.2);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      @media (forced-colors: active) {
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-offset: calc(1px * -1);
      }
    }
    &:focus-visible, &:has(:focus-visible) {
      outline: 2px solid var(--input-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
      }
      outline-offset: 0px;
    }
    &:checked, &[aria-checked="true"], &:has(> input:checked) {
      grid-template-columns: 1fr 1fr 0fr;
      background-color: var(--input-color);
      &:before {
        background-color: currentColor;
        @starting-style {
          opacity: 0;
        }
      }
    }
    &:indeterminate {
      grid-template-columns: 0.5fr 1fr 0.5fr;
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 40%;
      &:before {
        background-color: transparent;
      }
    }
  }
  .table {
    position: relative;
    width: 100%;
    overflow-x: hidden;
    overflow-y: auto;
    border-radius: var(--radius-box);
    text-align: left;
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
      text-align: right;
    }
    tr.row-hover {
      &, &:nth-child(even) {
        &:hover {
          @media (hover: hover) {
            background-color: var(--color-base-200);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-base-200) 80%, transparent);
            }
          }
        }
      }
    }
    tr.row-active {
      &, &:nth-child(even) {
        background-color: var(--color-base-200);
      }
    }
    :where(th, td) {
      padding-inline: calc(0.25rem * 5);
      padding-block: calc(0.25rem * 3);
      vertical-align: middle;
      text-wrap: nowrap;
    }
    :where(thead, tfoot) {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
      white-space: nowrap;
      color: var(--color-base-content);
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    :where(th) {
      --tw-font-weight: var(--font-weight-medium);
      font-weight: var(--font-weight-medium);
    }
    :where(.table-pin-rows thead tr) {
      position: sticky;
      top: calc(0.25rem * 0);
      z-index: 1;
      background-color: var(--color-base-100);
    }
    :where(.table-pin-rows tfoot tr) {
      position: sticky;
      bottom: calc(0.25rem * 0);
      z-index: 1;
      background-color: var(--color-base-100);
    }
    :where(.table-pin-cols tr th) {
      position: sticky;
      right: calc(0.25rem * 0);
      left: calc(0.25rem * 0);
      background-color: var(--color-base-100);
    }
    :where(thead tr) {
      border-bottom: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 25%, #0000);
      }
    }
    :where(tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 10%, #0000);
      }
    }
    :where(tfoot) {
      border-top: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 25%, #0000);
      }
    }
  }
  .avatar {
    position: relative;
    display: inline-flex;
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    & > div {
      display: block;
      aspect-ratio: 1 / 1;
      overflow: hidden;
    }
    img {
      height: 100%;
      width: 100%;
      object-fit: cover;
    }
    &.avatar-placeholder {
      & > div {
        display: flex;
        align-items: center;
        justify-content: center;
      }
    }
    &.avatar-online-top {
      &:before {
        content: "";
        position: absolute;
        z-index: 10;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-success);
        outline-style: var(--tw-outline-style);
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-width: 2px;
        outline-color: var(--color-base-100);
        width: 20%;
        height: 20%;
        top: 3%;
        right: 3%;
      }
    }
    &.avatar-offline-top {
      &:before {
        content: "";
        position: absolute;
        z-index: 10;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-base-200);
        outline-style: var(--tw-outline-style);
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-width: 2px;
        outline-color: var(--color-base-100);
        width: 20%;
        height: 20%;
        top: 3%;
        right: 3%;
      }
    }
    &.avatar-busy-top {
      &:before {
        content: "";
        position: absolute;
        z-index: 10;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-error);
        outline-style: var(--tw-outline-style);
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-width: 2px;
        outline-color: var(--color-base-100);
        width: 20%;
        height: 20%;
        top: 3%;
        right: 3%;
      }
    }
    &.avatar-away-top {
      &:before {
        content: "";
        position: absolute;
        z-index: 10;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-warning);
        outline-style: var(--tw-outline-style);
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-width: 2px;
        outline-color: var(--color-base-100);
        width: 20%;
        height: 20%;
        top: 3%;
        right: 3%;
      }
    }
    &.avatar-online-bottom {
      &:before {
        content: "";
        position: absolute;
        z-index: 10;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-success);
        outline-style: var(--tw-outline-style);
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-width: 2px;
        outline-color: var(--color-base-100);
        width: 20%;
        height: 20%;
        bottom: 3%;
        right: 3%;
      }
    }
    &.avatar-offline-bottom {
      &:before {
        content: "";
        position: absolute;
        z-index: 10;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-base-200);
        outline-style: var(--tw-outline-style);
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-width: 2px;
        outline-color: var(--color-base-100);
        width: 20%;
        height: 20%;
        bottom: 3%;
        right: 3%;
      }
    }
    &.avatar-busy-bottom {
      &:before {
        content: "";
        position: absolute;
        z-index: 10;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-error);
        outline-style: var(--tw-outline-style);
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-width: 2px;
        outline-color: var(--color-base-100);
        width: 20%;
        height: 20%;
        bottom: 3%;
        right: 3%;
      }
    }
    &.avatar-away-bottom {
      &:before {
        content: "";
        position: absolute;
        z-index: 10;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-warning);
        outline-style: var(--tw-outline-style);
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-width: 2px;
        outline-color: var(--color-base-100);
        width: 20%;
        height: 20%;
        bottom: 3%;
        right: 3%;
      }
    }
  }
  .select {
    position: relative;
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: pointer;
    appearance: none;
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 10);
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    user-select: none;
    height: var(--size);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'><path fill='none' stroke='%239293AE' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m6 9l6 6l6-6'/></svg>");
    background-size: 1.3em;
    background-position: calc(100% - 0.5rem) center;
    background-repeat: no-repeat;
    text-overflow: ellipsis;
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    [dir="rtl"] & {
      background-position: calc(0% + 1.3em) center;
    }
    select {
      margin-inline-end: calc(0.25rem * -10);
      height: 100%;
      width: calc(100% + 2.75rem);
      appearance: none;
      padding-inline-start: calc(0.25rem * 3);
      padding-inline-end: calc(0.25rem * 10);
      background-color: transparent;
      border-style: none;
      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    &[multiple] {
      background-image: none;
    }
    &:focus, &:focus-within {
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --input-color: var(--color-primary);
      --tw-shadow-color: var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
      }
      outline: 1px solid var(--input-color);
      border-color: var(--input-color);
      isolation: isolate;
    }
    &:has(> select[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-style: var(--tw-border-style);
      border-width: 0px;
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
      &::placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
        }
      }
    }
    &:has(> select[disabled]) > select[disabled] {
      cursor: not-allowed;
    }
    .input > & {
      height: auto;
      border-style: var(--tw-border-style);
      border-width: 0px;
      &:focus, &:focus-within {
        --tw-shadow: 0 0 #0000;
        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
        outline-style: var(--tw-outline-style);
        outline-width: 0px;
      }
    }
    &:has(> .select-floating) select {
      &::placeholder {
        color: transparent;
      }
      &:focus {
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
      }
    }
  }
  .advance-select-toggle {
    position: relative;
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: pointer;
    appearance: none;
    align-items: center;
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 10);
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    user-select: none;
    height: var(--size);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    text-overflow: ellipsis;
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    &:focus, &:focus-within {
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --input-color: var(--color-primary);
      --tw-shadow-color: var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
      }
      outline: 1px solid var(--input-color);
      border-color: var(--input-color);
      isolation: isolate;
    }
    &:focus-visible {
      outline: unset;
    }
  }
  .checkbox {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-neutral-content);
    border: var(--border) solid var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    --input-color: var(--color-neutral);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    &:before {
      --tw-content: "";
      content: var(--tw-content);
      display: block;
      width: 100%;
      height: 100%;
      rotate: 45deg;
      background-color: currentColor;
      opacity: 0%;
      transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
      transition-delay: 0.1s;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
      box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      font-size: 1rem;
      line-height: 0.75;
    }
    &:focus-visible {
      outline: 2px solid var(--input-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
      }
      outline-offset: 0px;
    }
    &:checked, &[aria-checked="true"] {
      background-color: var(--input-color, #0000);
      border-color: var(--input-color, #0000);
      box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 2px 0 var(--color-base-300);
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 20%, #0000);
      }
      &:before {
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
        opacity: 100%;
      }
      @media (forced-colors: active) {
        &:before {
          rotate: 0deg;
          background-color: transparent;
          --tw-content: "✔︎";
          clip-path: none;
        }
      }
      @media print {
        &:before {
          rotate: 0deg;
          background-color: transparent;
          --tw-content: "✔︎";
          clip-path: none;
        }
      }
    }
    &:indeterminate {
      background-color: var(--color-neutral);
      &:before {
        rotate: 0deg;
        opacity: 100%;
        translate: 0 -35%;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
      }
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 40%;
    }
  }
  .radio {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    border: var(--border) solid var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, var(--color-neutral));
    &:before {
      display: block;
      width: 100%;
      height: 100%;
      border-radius: calc(infinity * 1px);
      --tw-content: "";
      content: var(--tw-content);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    &:focus-visible {
      outline: 2px solid var(--input-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
      }
      outline-offset: 0px;
    }
    &:checked, &[aria-checked="true"] {
      animation: radio 0.2s ease-out;
      border-color: currentColor;
      background-color: var(--color-base-100);
      box-shadow: 0 1px 2px 0 var(--color-base-300);
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 30%, #0000);
      }
      &:before {
        background-color: currentColor;
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
      }
      @media (forced-colors: active) {
        &:before {
          outline-style: var(--tw-outline-style);
          outline-width: 1px;
          outline-offset: calc(1px * -1);
        }
      }
      @media print {
        &:before {
          outline: 0.25rem solid;
          outline-offset: -1rem;
        }
      }
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 20%;
    }
  }
  .alert {
    position: relative;
    width: 100%;
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 4);
    color: var(--color-neutral-content);
    text-align: start;
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--alert-bg);
    border: var(--border) solid var(--alert-border);
    box-shadow: 0 0.1875rem 0 -0.125rem oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset;
    --alert-bg: var(--alert-color, var(--color-neutral));
    --alert-border: var(--alert-color, var(--color-neutral));
    &.alert-outline {
      color: var(--alert-color, var(--color-neutral));
      --alert-bg: transparent;
      box-shadow: none;
      background-image: none;
    }
    &.alert-soft {
      color: var(--alert-color, var(--color-neutral));
      --alert-bg: var(--alert-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --alert-bg: color-mix(in oklab, var(--alert-color, var(--color-neutral)) 10%, var(--color-base-100));
      }
      box-shadow: none;
      background-image: none;
    }
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }
  .end-3 {
    inset-inline-end: calc(var(--spacing) * 3);
  }
  .top-1 {
    top: calc(var(--spacing) * 1);
  }
  .top-1\/2 {
    top: calc(1/2 * 100%);
  }
  .top-2 {
    top: calc(var(--spacing) * 2);
  }
  .right-0 {
    right: calc(var(--spacing) * 0);
  }
  .right-4 {
    right: calc(var(--spacing) * 4);
  }
  .bottom-0 {
    bottom: calc(var(--spacing) * 0);
  }
  .left-4 {
    left: calc(var(--spacing) * 4);
  }
  .input {
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: text;
    appearance: none;
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    &:focus-visible {
      --tw-outline-style: none;
      outline-style: none;
    }
    border: var(--border) solid #0000;
    height: var(--size);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    &:hover:not(:focus, :focus-within), &:has(:hover):not(:focus, :focus-within) {
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
    }
    &:where(input) {
      display: inline-block;
    }
    :where(input:not([type="checkbox"]):not([type="radio"])) {
      display: inline-block;
      height: 100%;
      width: 100%;
      appearance: none;
      background-color: transparent;
      border: none;
      &:focus, &:focus-within, &:focus-visible {
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    &:focus, &:focus-within {
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --input-color: var(--color-primary);
      --tw-shadow-color: var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
      }
      outline: 1px solid var(--input-color);
      isolation: isolate;
    }
    &:has(> input[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-style: var(--tw-border-style);
      border-width: 0px;
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
      box-shadow: none;
    }
    &:has(> input[disabled]) > input[disabled] {
      cursor: not-allowed;
    }
    &::-webkit-date-and-time-value {
      text-align: inherit;
    }
    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -3);
      }
    }
    &:has(> .input-floating) input {
      &::placeholder {
        color: transparent;
      }
      &:focus {
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
      }
    }
  }
  .textarea {
    display: inline-flex;
    min-height: calc(0.25rem * 20);
    width: 100%;
    flex-shrink: 1;
    appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    &:hover {
      @media (hover: hover) {
        border-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
        }
      }
    }
    &:focus-visible {
      --tw-outline-style: none;
      outline-style: none;
    }
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    :where(textarea) {
      appearance: none;
      background-color: transparent;
      border: none;
      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    &:focus, &:focus-within {
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --input-color: var(--color-primary);
      --tw-shadow-color: var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
      }
      outline: 1px solid var(--input-color);
      border-color: var(--input-color);
      isolation: isolate;
    }
    &:has(> textarea[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
      &::placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
    }
    &:has(> textarea[disabled]) > textarea[disabled] {
      cursor: not-allowed;
    }
    &:has(> textarea) {
      padding: calc(0.25rem * 0);
      textarea {
        height: auto;
        min-height: calc(0.25rem * 20);
        width: 100%;
        &:first-child {
          padding-block: calc(0.25rem * 2);
          padding-inline-start: calc(0.25rem * 4);
        }
        &:nth-child(2) {
          padding-block: calc(0.25rem * 2);
        }
        &:last-child {
          padding-block: calc(0.25rem * 2);
          padding-inline-end: calc(0.25rem * 4);
        }
      }
    }
    &:has(> .textarea-floating) {
      padding: calc(0.25rem * 0);
      :where(.textarea-floating:first-child) > textarea {
        padding-block: calc(0.25rem * 2);
        padding-inline-start: calc(0.25rem * 4);
      }
      :where(.textarea-floating:nth-child(2)) > textarea {
        padding-block: calc(0.25rem * 2);
      }
      :where(.textarea-floating:last-child) > textarea {
        padding-block: calc(0.25rem * 2);
        padding-inline-end: calc(0.25rem * 4);
      }
      :where(.textarea-floating:nth-child(2)) .textarea-floating-label, :where(.textarea-floating:last-child) .textarea-floating-label {
        margin-inline-start: calc(0.25rem * 0);
      }
      & * > textarea {
        width: 100%;
        height: 100%;
        min-height: calc(0.25rem * 20);
      }
    }
    &:has(> .textarea-floating) textarea {
      &::placeholder {
        color: transparent;
      }
      &:focus {
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
      }
    }
  }
  .btn-active {
    --btn-bg: var(--btn-color, var(--color-neutral));
    @supports (color: color-mix(in lab, red, red)) {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 90%, #000);
    }
    isolation: isolate;
    .btn-soft& {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
      }
    }
    .btn-outline& {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
      }
    }
    .btn-text& {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
      }
    }
    .btn-gradient& {
      --btn-shadow: 0px 4px 6px -1px var(--btn-color, var(--color-neutral)),
    0px 2px 4px -2px var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-shadow: 0px 4px 6px -1px color-mix(in oklab, var(--btn-color, var(--color-neutral)) 30%, #0000),
    0px 2px 4px -2px color-mix(in oklab, var(--btn-color, var(--color-neutral)) 30%, #0000);
      }
      background-position: 99% center;
    }
  }
  .advance-select-menu {
    z-index: 10;
    width: 100%;
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(0.25rem * 0.5) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(0.25rem * 0.5) * calc(1 - var(--tw-space-y-reverse)));
    }
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    background-image: none;
    padding: calc(0.25rem * 2);
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .z-10 {
    z-index: 10;
  }
  .z-50 {
    z-index: 50;
  }
  .filter {
    display: flex;
    flex-wrap: wrap;
    input[type="radio"] {
      width: auto;
    }
    input {
      overflow: hidden;
      opacity: 100%;
      scale: 1;
      transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
      &:not(:last-child) {
        margin-inline-end: calc(0.25rem * 1);
      }
      &.filter-reset {
        aspect-ratio: 1 / 1;
        &::after {
          content: "×";
        }
      }
    }
    &:not(:has(input:checked:not(.filter-reset))) {
      .filter-reset, input[type="reset"] {
        scale: 0;
        border-width: 0;
        margin-inline: calc(0.25rem * 0);
        width: calc(0.25rem * 0);
        padding-inline: calc(0.25rem * 0);
        opacity: 0%;
      }
    }
    &:has(input:checked:not(.filter-reset)) {
      input:not(:checked, .filter-reset, input[type="reset"]) {
        scale: 0;
        border-width: 0;
        margin-inline: calc(0.25rem * 0);
        width: calc(0.25rem * 0);
        padding-inline: calc(0.25rem * 0);
        opacity: 0%;
      }
    }
  }
  .mx-4 {
    margin-inline: calc(var(--spacing) * 4);
  }
  .mx-auto {
    margin-inline: auto;
  }
  .input-lg {
    padding-inline: calc(0.25rem * 4);
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
    --size: calc(var(--size-field, 0.25rem) * 11.5);
    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -3);
      }
    }
  }
  .input-md {
    padding-inline: calc(0.25rem * 3);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -3);
      }
    }
  }
  .input-sm {
    padding-inline: calc(0.25rem * 2.5);
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    --size: calc(var(--size-field, 0.25rem) * 7.5);
    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: calc(0.25rem * -2);
        margin-inline-end: calc(0.25rem * -3);
      }
    }
  }
  .input-xl {
    padding-inline: calc(0.25rem * 4.5);
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
    --size: calc(var(--size-field, 0.25rem) * 14);
    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: calc(0.25rem * -4);
        margin-inline-end: calc(0.25rem * -3);
      }
    }
  }
  .my-2 {
    margin-block: calc(var(--spacing) * 2);
  }
  .my-4 {
    margin-block: calc(var(--spacing) * 4);
  }
  .my-12 {
    margin-block: calc(var(--spacing) * 12);
  }
  .input {
    &::file-selector-button {
      margin-inline-end: calc(0.25rem * 4);
      display: inline-flex;
      height: 100%;
      flex-shrink: 0;
      cursor: pointer;
      flex-wrap: wrap;
      align-items: center;
      justify-content: center;
      border-style: var(--tw-border-style);
      border-width: 0px;
      background-color: var(--color-primary);
      padding-inline: calc(0.25rem * 4);
      text-align: center;
      font-size: var(--text-base);
      line-height: var(--tw-leading, var(--text-base--line-height));
      --tw-leading: 1;
      --tw-font-weight: var(--font-weight-semibold);
      font-weight: var(--font-weight-semibold);
      color: var(--color-primary-content);
      text-transform: uppercase;
      text-decoration-line: none;
      webkit-user-select: none;
      user-select: none;
      --input-color: var(--color-primary);
      &.input-sm {
        font-size: var(--text-sm);
        line-height: var(--tw-leading, var(--text-sm--line-height));
      }
      &.input-md {
        font-size: var(--text-base);
        line-height: var(--tw-leading, var(--text-base--line-height));
      }
      &.input-lg {
        font-size: var(--text-lg);
        line-height: var(--tw-leading, var(--text-lg--line-height));
      }
      &.input-xl {
        font-size: var(--text-xl);
        line-height: var(--tw-leading, var(--text-xl--line-height));
      }
    }
    &[type="file"] {
      overflow: hidden;
      padding-inline-start: calc(0.25rem * 0);
    }
    .input-floating &::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-inline-end: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
      }
      outline: none;
    }
  }
  .-mt-1 {
    margin-top: calc(var(--spacing) * -1);
  }
  .-mt-2 {
    margin-top: calc(var(--spacing) * -2);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-10 {
    margin-top: calc(var(--spacing) * 10);
  }
  .footer {
    display: grid;
    width: 100%;
    grid-auto-flow: row;
    place-items: start;
    column-gap: calc(0.25rem * 4);
    row-gap: calc(0.25rem * 10);
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
    @media (width >= 48rem) {
      grid-auto-flow: column;
    }
    & > * {
      display: grid;
      place-items: start;
      gap: calc(0.25rem * 3);
    }
    .footer-title {
      margin-bottom: calc(0.25rem * 1);
      font-size: var(--text-base);
      line-height: var(--tw-leading, var(--text-base--line-height));
      --tw-font-weight: var(--font-weight-medium);
      font-weight: var(--font-weight-medium);
      color: var(--color-base-content);
    }
    &.footer-center {
      place-items: center;
      text-align: center;
      @media (width >= 48rem) {
        grid-auto-flow: row dense;
      }
      & > * {
        place-items: center;
      }
    }
    :where(.link) {
      --tw-font-weight: var(--font-weight-normal);
      font-weight: var(--font-weight-normal);
    }
  }
  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-5 {
    margin-bottom: calc(var(--spacing) * 5);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .status {
    display: inline-block;
    aspect-ratio: 1 / 1;
    width: calc(0.25rem * 2.5);
    height: calc(0.25rem * 2.5);
    border-radius: calc(infinity * 1px);
    background-color: var(--color-neutral);
    background-position: center;
    background-repeat: no-repeat;
    vertical-align: middle;
    color: var(--color-neutral);
    background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000);
    box-shadow: 0 2px 3px -1px currentColor;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }
  .badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 1.5);
    border-radius: var(--radius-selector);
    text-align: center;
    vertical-align: middle;
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    border: var(--border) solid var(--badge-border);
    padding-inline: calc(0.25rem * 3 - var(--border));
    width: fit-content;
    color: var(--badge-fg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--badge-bg);
    --badge-border: var(--badge-color, var(--color-neutral));
    --badge-bg: var(--badge-color, var(--color-neutral));
    --badge-fg: var(--color-neutral-content);
    --size: calc(var(--size-selector, 0.25rem) * 6);
    height: var(--size);
    &.badge-outline {
      --badge-fg: var(--badge-color, var(--color-neutral));
      --badge-bg: transparent;
      background-image: none;
    }
    &.badge-soft {
      --badge-border: none;
      --badge-fg: var(--badge-color, var(--color-neutral));
      --badge-bg: var(--badge-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --badge-bg: color-mix(in oklab, var(--badge-color, var(--color-neutral)) 10%, var(--color-base-100));
      }
      background-image: none;
    }
  }
  .progress {
    display: flex;
    height: calc(0.25rem * 1.5);
    width: 100%;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: var(--color-base-200);
  }
  .icon-\[tabler--caret-down-filled\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='black' d='M18 9c.852 0 1.297.986.783 1.623l-.076.084l-6 6a1 1 0 0 1-1.32.083l-.094-.083l-6-6l-.083-.094l-.054-.077l-.054-.096l-.017-.036l-.027-.067l-.032-.108l-.01-.053l-.01-.06l-.004-.057v-.118l.005-.058l.009-.06l.01-.052l.032-.108l.027-.067l.07-.132l.065-.09l.073-.081l.094-.083l.077-.054l.096-.054l.036-.017l.067-.027l.108-.032l.053-.01l.06-.01l.057-.004z'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--check\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m5 12l5 5L20 7'/%3E%3C/svg%3E");
  }
  .label-text {
    display: block;
    cursor: pointer;
    padding: calc(0.25rem * 1);
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    color: var(--color-base-content);
  }
  .join {
    display: inline-flex;
    align-items: stretch;
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
    :where(.join-item) {
      border-start-start-radius: var(--join-ss, 0);
      border-start-end-radius: var(--join-se, 0);
      border-end-start-radius: var(--join-es, 0);
      border-end-end-radius: var(--join-ee, 0);
      * {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:first-child) {
      --join-ss: var(--radius-field);
      --join-se: 0;
      --join-es: var(--radius-field);
      --join-ee: 0;
    }
    :first-child:not(:last-child) {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: 0;
        --join-es: var(--radius-field);
        --join-ee: 0;
      }
    }
    > .join-item:where(:last-child) {
      --join-ss: 0;
      --join-se: var(--radius-field);
      --join-es: 0;
      --join-ee: var(--radius-field);
    }
    :last-child:not(:first-child) {
      :where(.join-item) {
        --join-ss: 0;
        --join-se: var(--radius-field);
        --join-es: 0;
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:only-child) {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }
    :only-child {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
  }
  .validate {
    & *:valid ~ .success-message {
      display: block;
    }
    & *:has(:valid) ~ .success-message {
      display: block;
    }
    & *:invalid ~ .error-message {
      display: block;
    }
    & *:has(:invalid) ~ .error-message {
      display: block;
    }
    & .input:valid::file-selector-button {
      background-color: var(--color-success);
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
    & .input:invalid::file-selector-button {
      background-color: var(--color-error);
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
    & .input-floating > .input:valid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    & .input-floating > .input:invalid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
    & .label-text:has(~ :valid) {
      color: var(--color-success);
    }
    & .label-text:has(~ * :valid) {
      color: var(--color-success);
    }
    & :is(:valid) ~ .helper-text {
      color: var(--color-success);
    }
    & *:has(:valid) ~ .helper-text {
      color: var(--color-success);
    }
    & :is(:valid) ~ .label-text {
      color: var(--color-success);
    }
    & :is(:valid) ~ .label-text * {
      color: var(--color-success);
    }
    & :is(:valid) ~ * >.label-text {
      color: var(--color-success);
    }
    & .label-text:has(~ :invalid) {
      color: var(--color-error);
    }
    & .label-text:has(~ * :invalid) {
      color: var(--color-error);
    }
    & :is(:invalid) ~ .helper-text {
      color: var(--color-error);
    }
    & *:has(:invalid) ~ .helper-text {
      color: var(--color-error);
    }
    & :is(:invalid) ~ .label-text {
      color: var(--color-error);
    }
    & :is(:invalid) ~ .label-text * {
      color: var(--color-error);
    }
    & :is(:invalid) ~ * >.label-text {
      color: var(--color-error);
    }
    & select:has(~ * > .selected) + .advance-select-toggle {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    & select:not(:has(~ * > .selected)) + .advance-select-toggle {
      --input-color: var(--color-error);
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    & .input-floating:has(:valid) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      .input-floating-label {
        color: var(--color-success);
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-success);
        }
      }
    }
    & .input-floating:has(:invalid) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      .input-floating-label {
        color: var(--color-error);
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-error);
        }
      }
    }
    & .textarea-floating:has(:valid) {
      .textarea-floating-label {
        color: var(--color-success);
      }
      &:focus-within, &:not(:has(textarea:placeholder-shown)), &:has(.textarea:focus) {
        .textarea-floating-label {
          color: var(--color-success);
        }
      }
    }
    & .textarea-floating:has(:invalid) {
      .textarea-floating-label {
        color: var(--color-error);
      }
      &:focus-within, &:not(:has(textarea:placeholder-shown)), &:has(.textarea:focus) {
        .textarea-floating-label {
          color: var(--color-error);
        }
      }
    }
    & .select-floating:has(:valid) {
      .select-floating-label {
        color: var(--color-success);
      }
      &:focus-within, &:not(:has(select:placeholder-shown)), &:has(.select:focus) {
        .select-floating-label {
          color: var(--color-success);
        }
      }
    }
    & .select-floating:has(:invalid) {
      .select-floating-label {
        color: var(--color-error);
      }
      &:focus-within, &:not(:has(select:placeholder-shown)), &:has(.select:focus) {
        .select-floating-label {
          color: var(--color-error);
        }
      }
    }
  }
  .error-message {
    display: none;
    padding: calc(0.25rem * 1);
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    color: var(--color-error);
    webkit-user-select: none;
    user-select: none;
  }
  .helper-text {
    display: block;
    padding: calc(0.25rem * 1);
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
    webkit-user-select: none;
    user-select: none;
  }
  .success-message {
    display: none;
    padding: calc(0.25rem * 1);
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    color: var(--color-success);
    webkit-user-select: none;
    user-select: none;
  }
  .tooltip {
    display: inline-block;
    text-align: center;
  }
  .error-message {
    .validate *:invalid ~ & {
      display: block;
    }
    .validate *:has(:invalid) ~ & {
      display: block;
    }
  }
  .success-message {
    .validate *:valid ~ & {
      display: block;
    }
    .validate *:has(:valid) ~ & {
      display: block;
    }
  }
  .block {
    display: block;
  }
  .contents {
    display: contents;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .table {
    display: table;
  }
  .size-4 {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }
  .size-12 {
    width: calc(var(--spacing) * 12);
    height: calc(var(--spacing) * 12);
  }
  .input {
    & > .select {
      height: auto;
      border-style: var(--tw-border-style);
      border-width: 0px;
      &:focus, &:focus-within {
        --tw-shadow: 0 0 #0000;
        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
        outline-style: var(--tw-outline-style);
        outline-width: 0px;
      }
    }
  }
  .h-48 {
    height: calc(var(--spacing) * 48);
  }
  .max-h-\[80vh\] {
    max-height: 80vh;
  }
  .min-h-screen {
    min-height: 100vh;
  }
  .advance-select-option {
    width: 100%;
    cursor: pointer;
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-neutral);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
        }
      }
    }
    &:focus {
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      --tw-outline-style: none;
      outline-style: none;
    }
  }
  .w-full {
    width: 100%;
  }
  .max-w-3xl {
    max-width: var(--container-3xl);
  }
  .max-w-4xl {
    max-width: var(--container-4xl);
  }
  .max-w-6xl {
    max-width: var(--container-6xl);
  }
  .max-w-7xl {
    max-width: var(--container-7xl);
  }
  .flex-shrink {
    flex-shrink: 1;
  }
  .shrink-0 {
    flex-shrink: 0;
  }
  .flex-grow {
    flex-grow: 1;
  }
  .border-collapse {
    border-collapse: collapse;
  }
  .-translate-y-1 {
    --tw-translate-y: calc(var(--spacing) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .-translate-y-1\/2 {
    --tw-translate-y: calc(calc(1/2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .radio-inset {
    &:checked, &[aria-checked="true"] {
      animation: radio-inset 0.2s ease-out;
      background-color: currentColor;
      box-shadow: 0 6px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)), 0 1px 2px 0 var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 6px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)), 0 1px 2px 0 color-mix(in oklab, var(--color-base-content) 30%, #0000);
      }
      &:before {
        background-color: var(--color-base-100);
        box-shadow: none;
      }
    }
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .resize {
    resize: both;
  }
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  .items-center {
    align-items: center;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .skeleton {
    border-radius: var(--radius-box);
    background-color: var(--color-base-200);
    will-change: background-position;
    background-image: linear-gradient(105deg, #0000 0% 40%, var(--color-base-100) 50%, #0000 60% 100%);
    background-size: 200% auto;
    background-repeat: no-repeat;
    background-position-x: -50%;
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-full {
    border-radius: calc(infinity * 1px);
  }
  .rounded-lg {
    border-radius: var(--radius-lg);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .btn-soft {
    --btn-shadow: "";
    color: var(--btn-color, var(--color-neutral));
    --btn-bg: var(--btn-color, var(--color-neutral));
    @supports (color: color-mix(in lab, red, red)) {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, var(--color-base-100));
    }
    border-width: 0;
    --btn-noise: none;
    &:focus-visible {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
      }
    }
    @media (hover: hover) {
      &:hover {
        --btn-bg: var(--btn-color, var(--color-neutral));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
        }
      }
    }
    &.btn-active {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
      }
    }
  }
  .border-t-2 {
    border-top-style: var(--tw-border-style);
    border-top-width: 2px;
  }
  .input {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      border-color: var(--color-success);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-success);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      border-color: var(--color-error);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-error);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    &.is-valid::file-selector-button {
      background-color: var(--color-success);
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
    .validate &:valid::file-selector-button {
      background-color: var(--color-success);
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
    &.is-invalid::file-selector-button {
      background-color: var(--color-error);
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
    .validate &:invalid::file-selector-button {
      background-color: var(--color-error);
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
    .input-floating > &.is-valid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    .validate .input-floating > &:valid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    .input-floating > &.is-invalid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
    .validate .input-floating > &:invalid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
  }
  .input-floating {
    & > .input.is-valid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    .validate & > .input:valid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    & > .input.is-invalid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
    .validate & > .input:invalid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
    &:has(.is-valid) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      .input-floating-label {
        color: var(--color-success);
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-success);
        }
      }
    }
    .validate &:has(:valid) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      .input-floating-label {
        color: var(--color-success);
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-success);
        }
      }
    }
    &:has(.is-invalid) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      .input-floating-label {
        color: var(--color-error);
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-error);
        }
      }
    }
    .validate &:has(:invalid) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      .input-floating-label {
        color: var(--color-error);
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-error);
        }
      }
    }
  }
  .is-invalid {
    .input&::file-selector-button {
      background-color: var(--color-error);
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
    .input-floating > .input&::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
    .label-text:has(~ &) {
      color: var(--color-error);
    }
    .label-text:has(~ * &) {
      color: var(--color-error);
    }
    :is(&) ~ .helper-text {
      color: var(--color-error);
    }
    *:has(&) ~ .helper-text {
      color: var(--color-error);
    }
    :is(&) ~ .label-text {
      color: var(--color-error);
    }
    :is(&) ~ .label-text * {
      color: var(--color-error);
    }
    :is(&) ~ * >.label-text {
      color: var(--color-error);
    }
    select& + .advance-select-toggle {
      --input-color: var(--color-error);
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    .advance-select-tag:has(> &) {
      --input-color: var(--color-error);
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    .input-floating:has(&) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      .input-floating-label {
        color: var(--color-error);
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-error);
        }
      }
    }
    .textarea-floating:has(&) {
      .textarea-floating-label {
        color: var(--color-error);
      }
      &:focus-within, &:not(:has(textarea:placeholder-shown)), &:has(.textarea:focus) {
        .textarea-floating-label {
          color: var(--color-error);
        }
      }
    }
    .select-floating:has(&) {
      .select-floating-label {
        color: var(--color-error);
      }
      &:focus-within, &:not(:has(select:placeholder-shown)), &:has(.select:focus) {
        .select-floating-label {
          color: var(--color-error);
        }
      }
    }
  }
  .is-valid {
    .input&::file-selector-button {
      background-color: var(--color-success);
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
    .input-floating > .input&::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    .label-text:has(~ &) {
      color: var(--color-success);
    }
    .label-text:has(~ * &) {
      color: var(--color-success);
    }
    :is(&) ~ .helper-text {
      color: var(--color-success);
    }
    *:has(&) ~ .helper-text {
      color: var(--color-success);
    }
    :is(&) ~ .label-text {
      color: var(--color-success);
    }
    :is(&) ~ .label-text * {
      color: var(--color-success);
    }
    :is(&) ~ * >.label-text {
      color: var(--color-success);
    }
    select& + .advance-select-toggle {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    .advance-select-tag:has(> &) {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    .input-floating:has(&) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      .input-floating-label {
        color: var(--color-success);
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-success);
        }
      }
    }
    .textarea-floating:has(&) {
      .textarea-floating-label {
        color: var(--color-success);
      }
      &:focus-within, &:not(:has(textarea:placeholder-shown)), &:has(.textarea:focus) {
        .textarea-floating-label {
          color: var(--color-success);
        }
      }
    }
    .select-floating:has(&) {
      .select-floating-label {
        color: var(--color-success);
      }
      &:focus-within, &:not(:has(select:placeholder-shown)), &:has(.select:focus) {
        .select-floating-label {
          color: var(--color-success);
        }
      }
    }
  }
  .checkbox {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      --input-color: var(--color-success);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      --input-color: var(--color-error);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-error);
      }
    }
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      color: var(--color-success-content);
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      color: var(--color-error-content);
    }
  }
  .select {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      border-color: var(--color-success);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-success);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      border-color: var(--color-error);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-error);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .textarea {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      border-color: var(--color-success);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-success);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      border-color: var(--color-error);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-error);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .radio {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      --input-color: var(--color-success);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      --input-color: var(--color-error);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-error);
      }
    }
  }
  .radio-inset {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      --input-color: var(--color-success);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      --input-color: var(--color-error);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-error);
      }
    }
  }
  .switch {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      --input-color: var(--color-success);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      --input-color: var(--color-error);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-error);
      }
    }
  }
  .border-accent {
    border-color: var(--color-accent);
  }
  .input-floating {
    & .input::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-inline-end: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
      }
      outline: none;
    }
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-200 {
    background-color: var(--color-base-200);
  }
  .bg-black {
    background-color: var(--color-black);
  }
  .mask-repeat {
    mask-repeat: repeat;
  }
  .object-contain {
    object-fit: contain;
  }
  .object-cover {
    object-fit: cover;
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .pt-1 {
    padding-top: calc(var(--spacing) * 1);
  }
  .pt-4 {
    padding-top: calc(var(--spacing) * 4);
  }
  .text-center {
    text-align: center;
  }
  .align-middle {
    vertical-align: middle;
  }
  .modal-title {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
    color: var(--color-base-content);
  }
  .input-lg {
    &::file-selector-button {
      font-size: var(--text-lg);
      line-height: var(--tw-leading, var(--text-lg--line-height));
    }
  }
  .input-md {
    &::file-selector-button {
      font-size: var(--text-base);
      line-height: var(--tw-leading, var(--text-base--line-height));
    }
  }
  .input-sm {
    &::file-selector-button {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
    }
  }
  .input-xl {
    &::file-selector-button {
      font-size: var(--text-xl);
      line-height: var(--tw-leading, var(--text-xl--line-height));
    }
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .text-wrap {
    text-wrap: wrap;
  }
  .label-text {
    &:has(~ .is-valid) {
      color: var(--color-success);
    }
    &:has(~ * .is-valid) {
      color: var(--color-success);
    }
    .validate &:has(~ :valid) {
      color: var(--color-success);
    }
    .validate &:has(~ * :valid) {
      color: var(--color-success);
    }
    :is(.is-valid) ~ & {
      color: var(--color-success);
    }
    :is(.is-valid) ~ & * {
      color: var(--color-success);
    }
    :is(.is-valid) ~ * >& {
      color: var(--color-success);
    }
    .validate :is(:valid) ~ & {
      color: var(--color-success);
    }
    .validate :is(:valid) ~ & * {
      color: var(--color-success);
    }
    .validate :is(:valid) ~ * >& {
      color: var(--color-success);
    }
    &:has(~ .is-invalid) {
      color: var(--color-error);
    }
    &:has(~ * .is-invalid) {
      color: var(--color-error);
    }
    .validate &:has(~ :invalid) {
      color: var(--color-error);
    }
    .validate &:has(~ * :invalid) {
      color: var(--color-error);
    }
    :is(.is-invalid) ~ & {
      color: var(--color-error);
    }
    :is(.is-invalid) ~ & * {
      color: var(--color-error);
    }
    :is(.is-invalid) ~ * >& {
      color: var(--color-error);
    }
    .validate :is(:invalid) ~ & {
      color: var(--color-error);
    }
    .validate :is(:invalid) ~ & * {
      color: var(--color-error);
    }
    .validate :is(:invalid) ~ * >& {
      color: var(--color-error);
    }
  }
  .helper-text {
    :is(.is-valid) ~ & {
      color: var(--color-success);
    }
    *:has(.is-valid) ~ & {
      color: var(--color-success);
    }
    .validate :is(:valid) ~ & {
      color: var(--color-success);
    }
    .validate *:has(:valid) ~ & {
      color: var(--color-success);
    }
    :is(.is-invalid) ~ & {
      color: var(--color-error);
    }
    *:has(.is-invalid) ~ & {
      color: var(--color-error);
    }
    .validate :is(:invalid) ~ & {
      color: var(--color-error);
    }
    .validate *:has(:invalid) ~ & {
      color: var(--color-error);
    }
  }
  .text-accent {
    color: var(--color-accent);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .text-white {
    color: var(--color-white);
  }
  .italic {
    font-style: italic;
  }
  .underline {
    text-decoration-line: underline;
  }
  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-base-200 {
    --tw-shadow-color: var(--color-base-200);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow-color: color-mix(in oklab, var(--color-base-200) var(--tw-shadow-alpha), transparent);
    }
  }
  .shadow-base-200\/50 {
    --tw-shadow-color: var(--color-base-200);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-200) 50%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .advance-select-toggle {
    select.is-valid + & {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    .validate select:has(~ * > .selected) + & {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    select.is-invalid + & {
      --input-color: var(--color-error);
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    .validate select:not(:has(~ * > .selected)) + & {
      --input-color: var(--color-error);
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .btn-info {
    --btn-color: var(--color-info);
    --btn-fg: var(--color-info-content);
  }
  .select-none {
    -webkit-user-select: none;
    user-select: none;
  }
  .sm\:block {
    @media (width >= 40rem) {
      display: block;
    }
  }
  .sm\:h-56 {
    @media (width >= 40rem) {
      height: calc(var(--spacing) * 56);
    }
  }
  .sm\:grid-cols-3 {
    @media (width >= 40rem) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  .sm\:text-base {
    @media (width >= 40rem) {
      font-size: var(--text-base);
      line-height: var(--tw-leading, var(--text-base--line-height));
    }
  }
  .md\:h-64 {
    @media (width >= 48rem) {
      height: calc(var(--spacing) * 64);
    }
  }
  .md\:w-auto {
    @media (width >= 48rem) {
      width: auto;
    }
  }
  .md\:grid-cols-2 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  .md\:grid-cols-4 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
  }
  .lg\:h-72 {
    @media (width >= 64rem) {
      height: calc(var(--spacing) * 72);
    }
  }
  .lg\:grid-cols-3 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  .lg\:grid-cols-5 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(5, minmax(0, 1fr));
    }
  }
}
@import url(https://fonts.bunny.net/css?family=lexend:500|martian-mono:500);
body {
  background-color: var(--color-base-100);
  padding: calc(var(--spacing) * 3);
  font-size: var(--text-lg);
  line-height: var(--tw-leading, var(--text-lg--line-height));
  color: var(--color-base-content);
}
b, strong {
  --tw-font-weight: var(--font-weight-bold);
  font-weight: var(--font-weight-bold);
}
i, em {
  font-style: italic;
}
code {
  margin: calc(var(--spacing) * 1);
  border-radius: var(--radius-lg);
  background-color: var(--color-base-100);
  padding: calc(var(--spacing) * 1);
  font-family: var(--font-mono);
}
img {
  -webkit-user-select: none;
  user-select: none;
}
hr {
  border-color: var(--color-base-content);
}
p {
  display: inline;
}
fieldset {
  border-radius: var(--radius-lg);
  border-style: var(--tw-border-style);
  border-width: 2px;
  border-color: var(--color-accent);
  padding: calc(var(--spacing) * 3);
}
legend {
  padding-inline: calc(var(--spacing) * 1);
}
.link2 {
  position: relative;
  display: inline-block;
  text-decoration-line: underline;
  text-decoration-color: var(--color-accent);
  text-decoration-thickness: 2px;
  &:hover {
    @media (hover: hover) {
      text-decoration-line: none;
    }
  }
}
.commandcard {
  border-radius: var(--radius-2xl);
  background-color: var(--color-base-200);
  padding: calc(var(--spacing) * 4);
  --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  &:hover {
    @media (hover: hover) {
      --tw-translate-y: calc(var(--spacing) * -1);
      translate: var(--tw-translate-x) var(--tw-translate-y);
    }
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.8% 0.005 297.73);
    --color-base-300: oklch(37.01% 0.0069 297.49);
    --color-base-content: oklch(37.57% 0.022 281.8);
    --color-primary: oklch(57.59% 0.247 287.24);
    --color-primary-content: oklch(96.57% 0.017 289.61);
    --color-secondary: oklch(55.79% 0.022 301.91);
    --color-secondary-content: oklch(97.64% 0.001 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.014 254.6);
    --color-neutral: oklch(37.57% 0.0222 281.8);
    --color-neutral-content: oklch(0.98 0.0013 286.38);
    --color-info: oklch(71.48% 0.126 215.22);
    --color-info-content: oklch(98.41% 0.019 200.87);
    --color-success: oklch(73.11% 0.217 147.04);
    --color-success-content: oklch(98.1% 0.014 174.18);
    --color-warning: oklch(79.87% 0.164 73.09);
    --color-warning-content: oklch(99.34% 0.011 95.16);
    --color-error: oklch(65.39% 0.222 25.86);
    --color-error-content: oklch(98.76% 0.009 67.73);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(31.23% 0.026 301.24);
      --color-base-200: oklch(25.39% 0.025 298.72);
      --color-base-300: oklch(23.44% 0.0194 298.63);
      --color-base-content: oklch(84.98% 0.014 295.28);
      --color-primary: oklch(53.93% 0.271 286.75);
      --color-primary-content: oklch(88.22% 0.062 290.17);
      --color-secondary: oklch(49.12% 0.021 303.05);
      --color-secondary-content: oklch(88.83% 0.007 304.23);
      --color-accent: oklch(54.61% 0.215 262.88);
      --color-accent-content: oklch(88.23% 0.057 254.13);
      --color-neutral: oklch(65.75% 0.022 294.95);
      --color-neutral-content: oklch(18.51% 0.017 301.92);
      --color-info: oklch(60.89% 0.111 221.72);
      --color-info-content: oklch(91.67% 0.077 205.04);
      --color-success: oklch(67.35% 0.201 146.84);
      --color-success-content: oklch(91.38% 0.069 168.24);
      --color-warning: oklch(72.59% 0.152 69.05);
      --color-warning-content: oklch(96.07% 0.057 93.2);
      --color-error: oklch(59.54% 0.208 26.28);
      --color-error-content: oklch(93.4% 0.039 54.86);
      --radius-selector: 0.25rem;
      --radius-field: 0.375rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 0;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.8% 0.005 297.73);
    --color-base-300: oklch(37.01% 0.0069 297.49);
    --color-base-content: oklch(37.57% 0.022 281.8);
    --color-primary: oklch(57.59% 0.247 287.24);
    --color-primary-content: oklch(96.57% 0.017 289.61);
    --color-secondary: oklch(55.79% 0.022 301.91);
    --color-secondary-content: oklch(97.64% 0.001 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.014 254.6);
    --color-neutral: oklch(37.57% 0.0222 281.8);
    --color-neutral-content: oklch(0.98 0.0013 286.38);
    --color-info: oklch(71.48% 0.126 215.22);
    --color-info-content: oklch(98.41% 0.019 200.87);
    --color-success: oklch(73.11% 0.217 147.04);
    --color-success-content: oklch(98.1% 0.014 174.18);
    --color-warning: oklch(79.87% 0.164 73.09);
    --color-warning-content: oklch(99.34% 0.011 95.16);
    --color-error: oklch(65.39% 0.222 25.86);
    --color-error-content: oklch(98.76% 0.009 67.73);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(31.23% 0.026 301.24);
    --color-base-200: oklch(25.39% 0.025 298.72);
    --color-base-300: oklch(23.44% 0.0194 298.63);
    --color-base-content: oklch(84.98% 0.014 295.28);
    --color-primary: oklch(53.93% 0.271 286.75);
    --color-primary-content: oklch(88.22% 0.062 290.17);
    --color-secondary: oklch(49.12% 0.021 303.05);
    --color-secondary-content: oklch(88.83% 0.007 304.23);
    --color-accent: oklch(54.61% 0.215 262.88);
    --color-accent-content: oklch(88.23% 0.057 254.13);
    --color-neutral: oklch(65.75% 0.022 294.95);
    --color-neutral-content: oklch(18.51% 0.017 301.92);
    --color-info: oklch(60.89% 0.111 221.72);
    --color-info-content: oklch(91.67% 0.077 205.04);
    --color-success: oklch(67.35% 0.201 146.84);
    --color-success-content: oklch(91.38% 0.069 168.24);
    --color-warning: oklch(72.59% 0.152 69.05);
    --color-warning-content: oklch(96.07% 0.057 93.2);
    --color-error: oklch(59.54% 0.208 26.28);
    --color-error-content: oklch(93.4% 0.039 54.86);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 20%, #0000) #0000;
    }
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
  .chat {
    --mask-chat: url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e");
  }
  .tooltip {
    --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes indeterminate-progress {
  0% {
    background-position-x: -75%;
  }
  50% {
    background-position-x: 125%;
  }
  100% {
    background-position-x: -75%;
  }
}
@keyframes progress-bar-stripes {
  0% {
    background-position-x: 0.75rem;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes radio-inset {
  0% {
    padding: 1px;
  }
  50% {
    padding: 4px;
  }
}
@layer base {
  :root:has(input.theme-controller[value=catppuccin]:checked),[data-theme="catppuccin"] {
    color-scheme: catppuccin;
    --color-base-100: #1e1e2e;
    --color-base-200: #181825;
    --color-base-300: #11111b;
    --color-base-content: #cdd6f4;
    --color-primary: #cba6f7;
    --color-primary-content: cdd6f4;
    --color-secondary: #94e2d5;
    --color-secondary-content: #1e1e2e;
    --color-accent: #fab387;
    --color-accent-content: #1e1e2e;
    --color-neutral: #a6e3a1;
    --color-neutral-content: #1e1e2e;
    --color-info: #89dceb;
    --color-info-content: #1e1e2e;
    --color-success: #a6e3a1;
    --color-success-content: #1e1e2e;
    --color-warning: #f9e2af;
    --color-warning-content: #1e1e2e;
    --color-error: #f38ba8;
    --color-error-content: #1e1e2e;
    --radius-selector: 1rem;
    --radius-field: 1rem;
    --radius-box: 1rem;
    --size-selector: 0.21875rem;
    --size-field: 0.21875rem;
    --border: 1px;
    --depth: 1;
    --noise: 1;
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-border-style: solid;
      --tw-font-weight: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
    }
  }
}
